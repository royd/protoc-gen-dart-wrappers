// Code generated by protoc-gen-dart-wrappers. DO NOT EDIT.

import 'dart:async';

import 'package:fixnum/fixnum.dart' as fixnum;
import 'example.pb.dart' as pb;
import 'example.pbgrpc.dart' as pbgrpc;
import 'package:grpc/grpc.dart' as grpc;

class MsgValueTypes {
  MsgValueTypes({
    required this.doubleType,
    required this.floatType,
    required this.int32Type,
    required this.int64Type,
    required this.uint32Type,
    required this.uint64Type,
    required this.sint32Type,
    required this.sint64Type,
    required this.fixed32Type,
    required this.fixed64Type,
    required this.sfixed32Type,
    required this.sfixed64Type,
    required this.boolType,
    required this.stringType,
    required this.bytesType,
  });

  factory MsgValueTypes.fromProto(pb.MsgValueTypes msg) {
    if (!msg.hasDoubleType()) {
      throw ArgumentError.notNull('doubleType');
    }

    if (!msg.hasFloatType()) {
      throw ArgumentError.notNull('floatType');
    }

    if (!msg.hasInt32Type()) {
      throw ArgumentError.notNull('int32Type');
    }

    if (!msg.hasInt64Type()) {
      throw ArgumentError.notNull('int64Type');
    }

    if (!msg.hasUint32Type()) {
      throw ArgumentError.notNull('uint32Type');
    }

    if (!msg.hasUint64Type()) {
      throw ArgumentError.notNull('uint64Type');
    }

    if (!msg.hasSint32Type()) {
      throw ArgumentError.notNull('sint32Type');
    }

    if (!msg.hasSint64Type()) {
      throw ArgumentError.notNull('sint64Type');
    }

    if (!msg.hasFixed32Type()) {
      throw ArgumentError.notNull('fixed32Type');
    }

    if (!msg.hasFixed64Type()) {
      throw ArgumentError.notNull('fixed64Type');
    }

    if (!msg.hasSfixed32Type()) {
      throw ArgumentError.notNull('sfixed32Type');
    }

    if (!msg.hasSfixed64Type()) {
      throw ArgumentError.notNull('sfixed64Type');
    }

    if (!msg.hasBoolType()) {
      throw ArgumentError.notNull('boolType');
    }

    if (!msg.hasStringType()) {
      throw ArgumentError.notNull('stringType');
    }

    if (!msg.hasBytesType()) {
      throw ArgumentError.notNull('bytesType');
    }

    return MsgValueTypes(
      doubleType: msg.doubleType,
      floatType: msg.floatType,
      int32Type: msg.int32Type,
      int64Type: msg.int64Type,
      uint32Type: msg.uint32Type,
      uint64Type: msg.uint64Type,
      sint32Type: msg.sint32Type,
      sint64Type: msg.sint64Type,
      fixed32Type: msg.fixed32Type,
      fixed64Type: msg.fixed64Type,
      sfixed32Type: msg.sfixed32Type,
      sfixed64Type: msg.sfixed64Type,
      boolType: msg.boolType,
      stringType: msg.stringType,
      bytesType: msg.bytesType,
    );
  }

  final double doubleType;
  final double floatType;
  final int int32Type;
  final fixnum.Int64 int64Type;
  final int uint32Type;
  final fixnum.Int64 uint64Type;
  final int sint32Type;
  final fixnum.Int64 sint64Type;
  final int fixed32Type;
  final fixnum.Int64 fixed64Type;
  final int sfixed32Type;
  final fixnum.Int64 sfixed64Type;
  final bool boolType;
  final String stringType;
  final List<int> bytesType;

  pb.MsgValueTypes toProto() {
    return pb.MsgValueTypes(
      doubleType: doubleType,
      floatType: floatType,
      int32Type: int32Type,
      int64Type: int64Type,
      uint32Type: uint32Type,
      uint64Type: uint64Type,
      sint32Type: sint32Type,
      sint64Type: sint64Type,
      fixed32Type: fixed32Type,
      fixed64Type: fixed64Type,
      sfixed32Type: sfixed32Type,
      sfixed64Type: sfixed64Type,
      boolType: boolType,
      stringType: stringType,
      bytesType: bytesType,
    );
  }
}

class MsgOne {
  MsgOne({
    required this.fieldOne,
    required this.fieldTwo,
    required this.fieldThree,
    this.fieldFour,
  });

  factory MsgOne.fromProto(pb.MsgOne msg) {
    if (!msg.hasFieldOne()) {
      throw ArgumentError.notNull('fieldOne');
    }

    if (!msg.hasFieldTwo()) {
      throw ArgumentError.notNull('fieldTwo');
    }

    if (!msg.hasFieldThree()) {
      throw ArgumentError.notNull('fieldThree');
    }

    return MsgOne(
      fieldOne: msg.fieldOne,
      fieldTwo: MsgTwo.fromProto(msg.fieldTwo),
      fieldThree: EnumOne.fromProto(msg.fieldThree),
      fieldFour: msg.fieldFour,
    );
  }

  final String fieldOne;
  final MsgTwo fieldTwo;
  final EnumOne fieldThree;
  final String? fieldFour;

  pb.MsgOne toProto() {
    return pb.MsgOne(
      fieldOne: fieldOne,
      fieldTwo: fieldTwo.toProto(),
      fieldThree: fieldThree.toProto(),
      fieldFour: fieldFour,
    );
  }
}

class MsgTwo {
  MsgTwo({
    required this.fieldOne,
  });

  factory MsgTwo.fromProto(pb.MsgTwo msg) {
    if (!msg.hasFieldOne()) {
      throw ArgumentError.notNull('fieldOne');
    }

    return MsgTwo(
      fieldOne: msg.fieldOne,
    );
  }

  final String fieldOne;

  pb.MsgTwo toProto() {
    return pb.MsgTwo(
      fieldOne: fieldOne,
    );
  }
}

class GetMsgRequest {
  GetMsgRequest({
    required this.arg,
  });

  factory GetMsgRequest.fromProto(pb.GetMsgRequest msg) {
    if (!msg.hasArg()) {
      throw ArgumentError.notNull('arg');
    }

    return GetMsgRequest(
      arg: msg.arg,
    );
  }

  final int arg;

  pb.GetMsgRequest toProto() {
    return pb.GetMsgRequest(
      arg: arg,
    );
  }
}

class GetMsgResponse {
  GetMsgResponse({
    required this.arg,
  });

  factory GetMsgResponse.fromProto(pb.GetMsgResponse msg) {
    if (!msg.hasArg()) {
      throw ArgumentError.notNull('arg');
    }

    return GetMsgResponse(
      arg: msg.arg,
    );
  }

  final int arg;

  pb.GetMsgResponse toProto() {
    return pb.GetMsgResponse(
      arg: arg,
    );
  }
}

class StreamMsgRequest {
  StreamMsgRequest({
    required this.arg,
    required this.enumArg,
  });

  factory StreamMsgRequest.fromProto(pb.StreamMsgRequest msg) {
    if (!msg.hasArg()) {
      throw ArgumentError.notNull('arg');
    }

    if (!msg.hasEnumArg()) {
      throw ArgumentError.notNull('enumArg');
    }

    return StreamMsgRequest(
      arg: msg.arg,
      enumArg: EnumOne.fromProto(msg.enumArg),
    );
  }

  final int arg;
  final EnumOne enumArg;

  pb.StreamMsgRequest toProto() {
    return pb.StreamMsgRequest(
      arg: arg,
      enumArg: enumArg.toProto(),
    );
  }
}

class StreamMsgResponse {
  StreamMsgResponse({
    required this.arg,
  });

  factory StreamMsgResponse.fromProto(pb.StreamMsgResponse msg) {
    if (!msg.hasArg()) {
      throw ArgumentError.notNull('arg');
    }

    return StreamMsgResponse(
      arg: msg.arg,
    );
  }

  final int arg;

  pb.StreamMsgResponse toProto() {
    return pb.StreamMsgResponse(
      arg: arg,
    );
  }
}

enum EnumOne {
  one,
  two;

  factory EnumOne.fromProto(pb.EnumOne en) =>
      EnumOne.values.firstWhere((e) => e.index == en.value);

  pb.EnumOne toProto() => pb.EnumOne.valueOf(this.index)!;
}

class MsgServiceClient {
  MsgServiceClient(
    grpc.ClientChannel channel, {
    grpc.CallOptions? options,
    Iterable<grpc.ClientInterceptor>? interceptors,
  }) : _base = pbgrpc.MsgServiceClient(
          channel,
          options: options,
          interceptors: interceptors,
        );

  final pbgrpc.MsgServiceClient _base;

  Future<GetMsgResponse> getMsg(GetMsgRequest request,
      {grpc.CallOptions? options}) async {
    final response = await _base.getMsg(
      request.toProto(),
    );

    return GetMsgResponse.fromProto(response);
  }

  Stream<StreamMsgResponse> streamMsg(StreamMsgRequest request,
      {grpc.CallOptions? options}) {
    final response = _base.streamMsg(
      request.toProto(),
    );

    final transformer = StreamTransformer.fromHandlers(
      handleData:
          (pb.StreamMsgResponse data, EventSink<StreamMsgResponse> sink) {
        sink.add(
          StreamMsgResponse.fromProto(data),
        );
      },
    );

    return response.transform(transformer);
  }
}

abstract class MsgService {
  Future<GetMsgResponse> getMsg(
    grpc.ServiceCall call,
    GetMsgRequest request,
  );

  Stream<StreamMsgResponse> streamMsg(
    grpc.ServiceCall call,
    StreamMsgRequest request,
  );

  pbgrpc.MsgServiceBase toProto() => _MsgService(base: this);
}

class _MsgService extends pbgrpc.MsgServiceBase {
  _MsgService({
    required MsgService base,
  }) : _base = base;

  final MsgService _base;

  @override
  Future<pb.GetMsgResponse> getMsg(
    grpc.ServiceCall call,
    pb.GetMsgRequest request,
  ) async {
    final response = await _base.getMsg(
      call,
      GetMsgRequest.fromProto(request),
    );

    return response.toProto();
  }

  @override
  Stream<pb.StreamMsgResponse> streamMsg(
    grpc.ServiceCall call,
    pb.StreamMsgRequest request,
  ) {
    final response = _base.streamMsg(
      call,
      StreamMsgRequest.fromProto(request),
    );

    final transformer = StreamTransformer.fromHandlers(
      handleData:
          (StreamMsgResponse data, EventSink<pb.StreamMsgResponse> sink) {
        sink.add(
          data.toProto(),
        );
      },
    );

    return response.transform(transformer);
  }
}
